{"ast":null,"code":"import { getGlobalClassNames, getInputFocusStyle, getPlaceholderStyles, hiddenContentStyle, HighContrastSelector } from '../../Styling';\nvar GlobalClassNames = {\n  root: 'ms-BasePicker',\n  label: 'ms-BasePicker-label',\n  text: 'ms-BasePicker-text',\n  itemsWrapper: 'ms-BasePicker-itemsWrapper',\n  input: 'ms-BasePicker-input',\n  error: 'ms-BasePicker-error'\n};\nexport function getStyles(props) {\n  var _a, _b, _c;\n  var className = props.className,\n    theme = props.theme,\n    isFocused = props.isFocused,\n    inputClassName = props.inputClassName,\n    disabled = props.disabled,\n    hasErrorMessage = props.hasErrorMessage;\n  if (!theme) {\n    throw new Error('theme is undefined or null in base BasePicker getStyles function.');\n  }\n  var semanticColors = theme.semanticColors,\n    effects = theme.effects,\n    fonts = theme.fonts;\n  var inputBorder = semanticColors.inputBorder,\n    inputBorderHovered = semanticColors.inputBorderHovered,\n    inputFocusBorderAlt = semanticColors.inputFocusBorderAlt;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  // placeholder style constants\n  var placeholderStyles = [fonts.medium, {\n    color: semanticColors.inputPlaceholderText,\n    opacity: 1,\n    selectors: (_a = {}, _a[HighContrastSelector] = {\n      color: 'GrayText'\n    }, _a)\n  }];\n  var disabledPlaceholderStyles = {\n    color: semanticColors.disabledText,\n    selectors: (_b = {}, _b[HighContrastSelector] = {\n      color: 'GrayText'\n    }, _b)\n  };\n  // The following lines are to create a semi-transparent color overlay for the disabled state with designer's approval.\n  // @todo: investigate the performance cost of the calculation below and apply if negligible.\n  //   Replacing with a static color for now.\n  // const rgbColor: IRGB | undefined = cssColor(palette.neutralQuaternaryAlt);\n  // const disabledOverlayColor = rgbColor ? `rgba(${rgbColor.r}, ${rgbColor.g}, ${rgbColor.b}, 0.29)` : 'transparent';\n  var disabledOverlayColor = 'rgba(218, 218, 218, 0.29)';\n  var focusColor = isFocused && !disabled && (hasErrorMessage ? semanticColors.errorText : inputFocusBorderAlt);\n  return {\n    root: [classNames.root, className, {\n      position: 'relative'\n    }],\n    error: [classNames.error, {\n      fontSize: 12,\n      fontWeight: 400,\n      color: semanticColors.errorText,\n      margin: 0,\n      paddingTop: 5,\n      display: hasErrorMessage ? 'flex' : 'none',\n      alignItems: 'center'\n    }],\n    text: [classNames.text, {\n      display: 'flex',\n      position: 'relative',\n      flexWrap: 'wrap',\n      alignItems: 'center',\n      boxSizing: 'border-box',\n      minWidth: 180,\n      minHeight: 30,\n      border: \"1px solid \".concat(inputBorder),\n      borderRadius: effects.roundedCorner2\n    }, !isFocused && !disabled && {\n      selectors: {\n        ':hover': {\n          borderColor: inputBorderHovered\n        }\n      }\n    }, focusColor && getInputFocusStyle(focusColor, effects.roundedCorner2), disabled && {\n      borderColor: disabledOverlayColor,\n      selectors: (_c = {\n        ':after': {\n          content: '\"\"',\n          position: 'absolute',\n          top: 0,\n          right: 0,\n          bottom: 0,\n          left: 0,\n          background: disabledOverlayColor\n        }\n      }, _c[HighContrastSelector] = {\n        borderColor: 'GrayText',\n        selectors: {\n          ':after': {\n            background: 'none'\n          }\n        }\n      }, _c)\n    }, hasErrorMessage && {\n      borderColor: semanticColors.errorText,\n      selectors: {\n        ':hover': {\n          borderColor: semanticColors.errorText\n        }\n      }\n    }],\n    itemsWrapper: [classNames.itemsWrapper, {\n      display: 'flex',\n      flexWrap: 'wrap',\n      maxWidth: '100%'\n    }],\n    input: [classNames.input, fonts.medium, {\n      height: 30,\n      border: 'none',\n      flexGrow: 1,\n      outline: 'none',\n      padding: '0 6px 0',\n      alignSelf: 'flex-end',\n      borderRadius: effects.roundedCorner2,\n      backgroundColor: 'transparent',\n      color: semanticColors.inputText,\n      selectors: {\n        '::-ms-clear': {\n          display: 'none'\n        },\n        '&:placeholder-shown': {\n          textOverflow: 'ellipsis'\n        }\n      }\n    }, getPlaceholderStyles(placeholderStyles), disabled && getPlaceholderStyles(disabledPlaceholderStyles), inputClassName],\n    screenReaderText: hiddenContentStyle,\n    subComponentStyles: {\n      label: {}\n    }\n  };\n}","map":{"version":3,"names":["getGlobalClassNames","getInputFocusStyle","getPlaceholderStyles","hiddenContentStyle","HighContrastSelector","GlobalClassNames","root","label","text","itemsWrapper","input","error","getStyles","props","className","theme","isFocused","inputClassName","disabled","hasErrorMessage","Error","semanticColors","effects","fonts","inputBorder","inputBorderHovered","inputFocusBorderAlt","classNames","placeholderStyles","medium","color","inputPlaceholderText","opacity","selectors","_a","disabledPlaceholderStyles","disabledText","_b","disabledOverlayColor","focusColor","errorText","position","fontSize","fontWeight","margin","paddingTop","display","alignItems","flexWrap","boxSizing","minWidth","minHeight","border","concat","borderRadius","roundedCorner2","borderColor","_c","content","top","right","bottom","left","background","maxWidth","height","flexGrow","outline","padding","alignSelf","backgroundColor","inputText","textOverflow","screenReaderText","subComponentStyles"],"sources":["C:\\Users\\sahan\\Documents\\Projects\\indian-cuisine-frontend\\node_modules\\@fluentui\\react\\lib\\components\\src\\components\\pickers\\BasePicker.styles.ts"],"sourcesContent":["import {\n  getGlobalClassNames,\n  getInputFocusStyle,\n  getPlaceholderStyles,\n  hiddenContentStyle,\n  HighContrastSelector,\n} from '../../Styling';\nimport type { IBasePickerStyleProps, IBasePickerStyles } from './BasePicker.types';\nimport type { IStyle } from '../../Styling';\n\nconst GlobalClassNames = {\n  root: 'ms-BasePicker',\n  label: 'ms-BasePicker-label',\n  text: 'ms-BasePicker-text',\n  itemsWrapper: 'ms-BasePicker-itemsWrapper',\n  input: 'ms-BasePicker-input',\n  error: 'ms-BasePicker-error',\n};\n\nexport function getStyles(props: IBasePickerStyleProps): IBasePickerStyles {\n  const { className, theme, isFocused, inputClassName, disabled, hasErrorMessage } = props;\n\n  if (!theme) {\n    throw new Error('theme is undefined or null in base BasePicker getStyles function.');\n  }\n  const { semanticColors, effects, fonts } = theme;\n  const { inputBorder, inputBorderHovered, inputFocusBorderAlt } = semanticColors;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  // placeholder style constants\n  const placeholderStyles: IStyle = [\n    fonts.medium,\n    {\n      color: semanticColors.inputPlaceholderText,\n      opacity: 1,\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'GrayText',\n        },\n      },\n    },\n  ];\n\n  const disabledPlaceholderStyles: IStyle = {\n    color: semanticColors.disabledText,\n    selectors: {\n      [HighContrastSelector]: {\n        color: 'GrayText',\n      },\n    },\n  };\n\n  // The following lines are to create a semi-transparent color overlay for the disabled state with designer's approval.\n  // @todo: investigate the performance cost of the calculation below and apply if negligible.\n  //   Replacing with a static color for now.\n  // const rgbColor: IRGB | undefined = cssColor(palette.neutralQuaternaryAlt);\n  // const disabledOverlayColor = rgbColor ? `rgba(${rgbColor.r}, ${rgbColor.g}, ${rgbColor.b}, 0.29)` : 'transparent';\n  const disabledOverlayColor = 'rgba(218, 218, 218, 0.29)';\n\n  const focusColor = isFocused && !disabled && (hasErrorMessage ? semanticColors.errorText : inputFocusBorderAlt);\n\n  return {\n    root: [classNames.root, className, { position: 'relative' }],\n    error: [\n      classNames.error,\n      {\n        fontSize: 12,\n        fontWeight: 400,\n        color: semanticColors.errorText,\n        margin: 0,\n        paddingTop: 5,\n        display: hasErrorMessage ? 'flex' : 'none',\n        alignItems: 'center',\n      },\n    ],\n    text: [\n      classNames.text,\n      {\n        display: 'flex',\n        position: 'relative',\n        flexWrap: 'wrap',\n        alignItems: 'center',\n        boxSizing: 'border-box',\n        minWidth: 180,\n        minHeight: 30,\n        border: `1px solid ${inputBorder}`,\n        borderRadius: effects.roundedCorner2,\n      },\n      !isFocused &&\n        !disabled && {\n          selectors: {\n            ':hover': {\n              borderColor: inputBorderHovered,\n            },\n          },\n        },\n      focusColor && getInputFocusStyle(focusColor, effects.roundedCorner2),\n      disabled && {\n        borderColor: disabledOverlayColor,\n        selectors: {\n          ':after': {\n            content: '\"\"',\n            position: 'absolute',\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0,\n            background: disabledOverlayColor,\n          },\n          [HighContrastSelector]: {\n            borderColor: 'GrayText',\n            selectors: {\n              ':after': {\n                background: 'none',\n              },\n            },\n          },\n        },\n      },\n      hasErrorMessage && {\n        borderColor: semanticColors.errorText,\n        selectors: {\n          ':hover': {\n            borderColor: semanticColors.errorText,\n          },\n        },\n      },\n    ],\n    itemsWrapper: [\n      classNames.itemsWrapper,\n      {\n        display: 'flex',\n        flexWrap: 'wrap',\n        maxWidth: '100%',\n      },\n    ],\n    input: [\n      classNames.input,\n      fonts.medium,\n      {\n        height: 30,\n        border: 'none',\n        flexGrow: 1,\n        outline: 'none',\n        padding: '0 6px 0',\n        alignSelf: 'flex-end',\n        borderRadius: effects.roundedCorner2,\n        backgroundColor: 'transparent',\n        color: semanticColors.inputText,\n        selectors: {\n          '::-ms-clear': {\n            display: 'none',\n          },\n          '&:placeholder-shown': {\n            textOverflow: 'ellipsis',\n          },\n        },\n      },\n      getPlaceholderStyles(placeholderStyles),\n      disabled && getPlaceholderStyles(disabledPlaceholderStyles),\n      inputClassName,\n    ],\n    screenReaderText: hiddenContentStyle,\n    subComponentStyles: {\n      label: {},\n    },\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}