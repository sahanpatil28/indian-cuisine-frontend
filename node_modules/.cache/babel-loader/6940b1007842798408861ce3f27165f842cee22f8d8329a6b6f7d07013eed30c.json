{"ast":null,"code":"import { getVirtualParent } from './getVirtualParent';\n/**\n * Gets the element which is the parent of a given element.\n * If `allowVirtuaParents` is `true`, this method prefers the virtual parent over\n * real DOM parent when present.\n *\n * @public\n */\nexport function getParent(child, allowVirtualParents) {\n  var _a, _b;\n  if (allowVirtualParents === void 0) {\n    allowVirtualParents = true;\n  }\n  if (!child) {\n    return null;\n  }\n  var parent = allowVirtualParents && getVirtualParent(child);\n  if (parent) {\n    return parent;\n  }\n  // Support looking for parents in shadow DOM\n  if (typeof child.assignedElements !== 'function' && ((_a = child.assignedSlot) === null || _a === void 0 ? void 0 : _a.parentNode)) {\n    // Element is slotted\n    return child.assignedSlot;\n  } else if (((_b = child.parentNode) === null || _b === void 0 ? void 0 : _b.nodeType) === 11) {\n    // nodeType 11 is DOCUMENT_FRAGMENT\n    // Element is in shadow root\n    return child.parentNode.host;\n  } else {\n    return child.parentNode;\n  }\n}","map":{"version":3,"names":["getVirtualParent","getParent","child","allowVirtualParents","parent","assignedElements","_a","assignedSlot","parentNode","_b","nodeType","host"],"sources":["C:\\Users\\sahan\\Documents\\Projects\\indian-cuisine-frontend\\node_modules\\@fluentui\\dom-utilities\\src\\getParent.ts"],"sourcesContent":["import { getVirtualParent } from './getVirtualParent';\n/**\n * Gets the element which is the parent of a given element.\n * If `allowVirtuaParents` is `true`, this method prefers the virtual parent over\n * real DOM parent when present.\n *\n * @public\n */\nexport function getParent(child: HTMLElement, allowVirtualParents: boolean = true): HTMLElement | null {\n  if (!child) {\n    return null;\n  }\n\n  const parent = allowVirtualParents && getVirtualParent(child);\n\n  if (parent) {\n    return parent;\n  }\n\n  // Support looking for parents in shadow DOM\n  if (typeof (child as HTMLSlotElement).assignedElements !== 'function' && child.assignedSlot?.parentNode) {\n    // Element is slotted\n    return child.assignedSlot as HTMLElement;\n  } else if (child.parentNode?.nodeType === 11) {\n    // nodeType 11 is DOCUMENT_FRAGMENT\n    // Element is in shadow root\n    return (child.parentNode as ShadowRoot).host as HTMLElement;\n  } else {\n    return child.parentNode as HTMLElement;\n  }\n}\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,oBAAoB;AACrD;;;;;;;AAOA,OAAM,SAAUC,SAASA,CAACC,KAAkB,EAAEC,mBAAmC;;EAAnC,IAAAA,mBAAA;IAAAA,mBAAA,OAAmC;EAAA;EAC/E,IAAI,CAACD,KAAK,EAAE;IACV,OAAO,IAAI;;EAGb,IAAME,MAAM,GAAGD,mBAAmB,IAAIH,gBAAgB,CAACE,KAAK,CAAC;EAE7D,IAAIE,MAAM,EAAE;IACV,OAAOA,MAAM;;EAGf;EACA,IAAI,OAAQF,KAAyB,CAACG,gBAAgB,KAAK,UAAU,KAAI,CAAAC,EAAA,GAAAJ,KAAK,CAACK,YAAY,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,UAAU,GAAE;IACvG;IACA,OAAON,KAAK,CAACK,YAA2B;GACzC,MAAM,IAAI,EAAAE,EAAA,GAAAP,KAAK,CAACM,UAAU,cAAAC,EAAA,uBAAAA,EAAA,CAAEC,QAAQ,MAAK,EAAE,EAAE;IAC5C;IACA;IACA,OAAQR,KAAK,CAACM,UAAyB,CAACG,IAAmB;GAC5D,MAAM;IACL,OAAOT,KAAK,CAACM,UAAyB;;AAE1C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}