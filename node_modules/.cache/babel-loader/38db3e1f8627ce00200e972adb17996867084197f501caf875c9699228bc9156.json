{"ast":null,"code":"import * as React from 'react';\nimport { makeShadowConfig } from '@fluentui/merge-styles';\n/**\n * Get a shadow config.\n * @param stylesheetKey - Globally unique key\n * @param win - Reference to the `window` global.\n * @returns ShadowConfig\n */\nexport var useShadowConfig = function (stylesheetKey, inShadow, win) {\n  if (inShadow === void 0) {\n    inShadow = false;\n  }\n  return React.useMemo(function () {\n    return makeShadowConfig(stylesheetKey, inShadow, win);\n  }, [stylesheetKey, inShadow, win]);\n};","map":{"version":3,"names":["React","makeShadowConfig","useShadowConfig","stylesheetKey","inShadow","win","useMemo"],"sources":["C:\\Users\\sahan\\Documents\\Projects\\indian-cuisine-frontend\\node_modules\\@fluentui\\utilities\\lib\\shadowDom\\src\\shadowDom\\hooks\\useShadowConfig.ts"],"sourcesContent":["import * as React from 'react';\nimport { makeShadowConfig } from '@fluentui/merge-styles';\nimport type { ShadowConfig } from '@fluentui/merge-styles';\n\nexport type ShadowConfigHook = (stylesheetKey: string, inShadow: boolean, win?: Window) => ShadowConfig;\n\n/**\n * Get a shadow config.\n * @param stylesheetKey - Globally unique key\n * @param win - Reference to the `window` global.\n * @returns ShadowConfig\n */\nexport const useShadowConfig: ShadowConfigHook = (stylesheetKey, inShadow = false, win?) => {\n  return React.useMemo(() => {\n    return makeShadowConfig(stylesheetKey, inShadow, win);\n  }, [stylesheetKey, inShadow, win]);\n};\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,gBAAgB,QAAQ,wBAAwB;AAKzD;;;;;;AAMA,OAAO,IAAMC,eAAe,GAAqB,SAAAA,CAACC,aAAa,EAAEC,QAAgB,EAAEC,GAAI;EAAtB,IAAAD,QAAA;IAAAA,QAAA,QAAgB;EAAA;EAC/E,OAAOJ,KAAK,CAACM,OAAO,CAAC;IACnB,OAAOL,gBAAgB,CAACE,aAAa,EAAEC,QAAQ,EAAEC,GAAG,CAAC;EACvD,CAAC,EAAE,CAACF,aAAa,EAAEC,QAAQ,EAAEC,GAAG,CAAC,CAAC;AACpC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}